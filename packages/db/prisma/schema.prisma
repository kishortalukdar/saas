generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/postgres"
}

model AdminUser {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_name           String   @unique
  password            String   @unique
  phoneNo   BigInt    @unique
  is_active Boolean   @default(false)
  created_at DateTime @default(now())

  plans        Plan[]
  features     Feature[]
  planFeatures PlanFeature[]
}

model Tenant {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_name  String   @unique
  gst_no        String?
  user_id       String   @unique @db.Uuid
  user          User     @relation("UserTenant", fields: [user_id], references: [id], onDelete: SetNull)
  created_at    DateTime @default(now())
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  phoneNo   BigInt   @unique
  is_active Boolean  @default(false)
  tenant    Tenant?  @relation("UserTenant")  // ðŸ‘ˆ reverse side of the relation
  created_at DateTime @default(now())
}
model Plan {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String         @unique
  price          Decimal        @default(0.00)
  billing_cycle  String         @default("monthly")
  is_free        Boolean        @default(false)
  created_at     DateTime       @default(now())
  planFeatures   PlanFeature[]
  admin_user_id  String       @db.Uuid
  admin_user     AdminUser    @relation(fields: [admin_user_id], references: [id], onDelete: SetNull)
}

model Feature {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String       @unique
  description    String?
  created_at     DateTime     @default(now())
  planFeatures   PlanFeature[]

  admin_user_id  String       @db.Uuid
  admin_user     AdminUser    @relation(fields: [admin_user_id], references: [id], onDelete: SetNull)
}

model PlanFeature {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan_id    String   @db.Uuid
  feature_id String   @db.Uuid
  enabled    Boolean  @default(false)

  plan       Plan     @relation(fields: [plan_id], references: [id], onDelete: Cascade)
  feature    Feature  @relation(fields: [feature_id], references: [id], onDelete: Cascade)

  @@unique([plan_id, feature_id])
  admin_user_id  String       @db.Uuid
  admin_user     AdminUser    @relation(fields: [admin_user_id], references: [id], onDelete: SetNull)
}



model Subscription {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  is_active    Boolean   @default(true)
  trial_start  DateTime?
  trial_end    DateTime?
  subscribed_at DateTime @default(now())

  plan_id       String       @db.Uuid
  user_id       String       @db.Uuid
  
}